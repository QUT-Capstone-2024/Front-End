import React, { useState, useRef, useEffect } from "react";
import { CustomButton, StatusStamp, Popover, CustomModal, EditImageModalContent as ModalContent } from "./index";
import EditIcon from '@mui/icons-material/Edit';
import UploadIcon from '@mui/icons-material/Upload';
import '../Styles/Cards.scss';

interface GalleryCardProps {
  cardType: "hero" | "gallery";
  image?: string | null;
  imageTag: string;
  imageInstance?: number; // New prop to handle the instance number
  imageStatus: "UNTAGGED" | "PENDING" | "APPROVED" | "REJECTED" | "ARCHIVED";
  rejectionReason?: string;
  imageComments?: string;
  imageDate?: string;
  isPlaceholder?: boolean;
}

const GalleryCard: React.FC<GalleryCardProps> = ({
  image,
  imageTag,
  imageInstance, // Accept the instance number as a prop
  imageStatus,
  rejectionReason,
  cardType = 'gallery',
  imageComments,
  imageDate,
  isPlaceholder = false,
}) => {
  const [popoverVisible, setPopoverVisible] = useState(false);
  const [modalOpen, setModalOpen] = useState(false);
  const [uploadedImage, setUploadedImage] = useState<string | null>(image || null); 
  const cardRef = useRef<HTMLDivElement>(null);

  const toggleModal = () => {
    setModalOpen(!modalOpen);
  };

  const handlePopoverClick = () => {
    if (!isPlaceholder) {
      setPopoverVisible(!popoverVisible);
    };
  };

  const handleUpdate = (updatedImage: File | null, updatedTag: string, updatedDescription: string) => {
  
    if (updatedImage) {
      const imageUrl = URL.createObjectURL(updatedImage);
      setUploadedImage(imageUrl);  // Updates the uploaded image state
    }
  
    toggleModal();  // Close the modal
    setPopoverVisible(false);  // Close the popover
  };

  useEffect(() => {
    if (isPlaceholder) {
      setPopoverVisible(true);
    }
  }, [isPlaceholder]);
  

  // Modify the display of the image tag to include the instance number (e.g., "BEDROOM 1")
  const displayTag = (imageTag: string) => {
    if (imageTag === "Bedroom" || imageTag === "Bathroom") {
      return imageInstance ? `${imageTag} ${imageInstance}` : imageTag;
    } else {
      return imageTag;
    } 
  }

  const popoverContent = (
    <>
      {isPlaceholder ? (
        <p onClick={toggleModal} style={{ textAlign: 'center', color: '#1f323e', marginTop: '30%' }}>
          These are suggested images for your property generated by VisionLOGIC.
        </p>
      ) : !uploadedImage ? (
        <p onClick={toggleModal} style={{ textAlign: 'center', color: '#1f323e', marginTop: '30%' }}>
          No image uploaded yet. Click to upload an image.
        </p>
      ) : (
        <>
          <p><strong>Uploaded:</strong> <br /> {imageDate}</p>
          {imageStatus === "REJECTED" ? (
            <p style={{ color: 'red' }}><strong>A new image is required:</strong><br /> {rejectionReason}</p>
          ) : (
            <p>{imageComments}</p>
          )}
        </>
      )}
    </>
  );


  //////////////////////////////////////// RENDER
  return (
    <div ref={cardRef} className="gallery-card">
      <div className="gallery-image-container"> 
        {imageStatus !== 'APPROVED' && image && <StatusStamp status={imageStatus} className={`stamp ${cardType}`} />}
        
        {uploadedImage ? (
          <img className={`${cardType} gallery-card-image`} src={uploadedImage} alt={imageTag} />
        ) : (
          <div className={`${cardType} gallery-card-image`} />
        )}

        {uploadedImage && (
          <CustomButton 
            className={`details-button ${cardType}`} 
            label='Details' 
            buttonType="textOnly"
            onClick={handlePopoverClick}
          />
        )}

        {!isPlaceholder ? (
            <EditIcon className={`edit-icon ${cardType}`} onClick={toggleModal} />
          ) : (
            <UploadIcon className={`upload-icon ${cardType}`} onClick={toggleModal} />
        )}

        <Popover
          content={popoverContent}
          visible={popoverVisible}
          onClose={handlePopoverClick}
          type={cardType}
        />
      </div>

      {/* Image tag with instance number */}
      <div className="gallery-card-tag">
        <p>{displayTag(imageTag)}</p> {/* Include instance number if it exists */}
      </div>

      <CustomModal
        modalType='editDetails'
        open={modalOpen}
        onConfirm={() => console.log('clicked')}
        onClose={toggleModal}
        title={displayTag(imageTag)}
      >
        <ModalContent 
          image={uploadedImage || ''} 
          imageTag={displayTag(imageTag)} 
          description={imageComments}
          toggleModal={toggleModal} 
          onUpdate={handleUpdate} 
        />
      </CustomModal>
    </div>
  );
};

export default GalleryCard;
